"""
1205번. 등수 구하기 ( 실버 4 )
문제
랭킹 - 비오름차순으로 저장되어 있음
같은 점수가 있을 경우, 같은 점수 중 가장 아래에 저장

예시 ) 100 90 90 80 -> 1 2 2 4 등

랭킹리스트에 올라갈 수 있는 점수의 개수 : P
비오름차순으로 정렬된 리스트의 개수 : N

태수의 새로운 점수가 랭킹 리스트에서 몇등하는지 구하는 프로그램 작성하기

만약 점수가 랭킹 리스트에 올라갈 수 없을 정도로 낮다면, -1 출력
랭킹 리스트가 꽉 차있을 때, 새 점수가 이점 점수보다 더 좋을 경우 점수가 바뀜

입력
첫째 줄 : N, 새로운 점수, P
둘째 줄 : 현재 랭킹 리스트에 있는 점수가 비오름차순으로 주어짐

출력
태수의 등수

1. p 값과 리스트의 길이 비교
2. p 값이 더 클경우, 무조건 등수를 출력할 수 있으니
list[i] < 태수의 등수 < list[i+1] 이런 위치 찾기
3. p 값이 더 작으면, 무조건 등수를 출력할 수 없으니
p에 해당하는 위치와 태수의 점수를 비교 후, 등수 안에 들면
위치 찾고 등수 출력
"""
import sys

input = sys.stdin.readline
# n, 점수, p
n,score,p = map(int, input().split())
sub = 0
# 리스트가 비어있을 경우
if n == 0:
    print(1)
    exit(0)
else:
    # p 값이 더 클경우, 무조건 등수 출력 가능
    # 비오름차순 리스트
    n_list = list(map(int, input().split()))
    if n == p and n_list[-1] >= score:
        print(-1)
    else:
        # 꼴등이라 생각
        sub = n+1
        
        for i in range(n):
            if score >= n_list[i]:
                sub = i+1
                break
        print(sub)

